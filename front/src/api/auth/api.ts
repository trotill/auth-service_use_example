/* tslint:disable */
/* eslint-disable */
/**
 * Authority service openApi
 * API Docs
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface JWTRefresh
 */
export interface JWTRefresh {
    /**
     * refresh токен
     * @type {string}
     * @memberof JWTRefresh
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     * логин
     * @type {string}
     * @memberof LoginParams
     */
    'login': string;
    /**
     * ID сессии
     * @type {string}
     * @memberof LoginParams
     */
    'sessionId'?: string;
    /**
     * Пароль+логин в md5 (в примере логин - admin пароль - 12345678 md5sum(admin12345678))
     * @type {string}
     * @memberof LoginParams
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * логин
     * @type {string}
     * @memberof UserCreate
     */
    'login': string;
    /**
     * имя
     * @type {string}
     * @memberof UserCreate
     */
    'firstName': string;
    /**
     * фамилия
     * @type {string}
     * @memberof UserCreate
     */
    'lastName': string;
    /**
     * Почта
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * роль
     * @type {string}
     * @memberof UserCreate
     */
    'role': UserCreateRoleEnum;
    /**
     * Заблокирован - 1/ разблокирован - 0
     * @type {number}
     * @memberof UserCreate
     */
    'locked': number;
    /**
     * Пароль+логин в md5
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}

export const UserCreateRoleEnum = {
    Admin: 'admin',
    Operator: 'operator',
    Guest: 'guest'
} as const;

export type UserCreateRoleEnum = typeof UserCreateRoleEnum[keyof typeof UserCreateRoleEnum];

/**
 * 
 * @export
 * @interface UserItem
 */
export interface UserItem {
    /**
     * логин
     * @type {string}
     * @memberof UserItem
     */
    'login': string;
    /**
     * имя
     * @type {string}
     * @memberof UserItem
     */
    'firstName': string;
    /**
     * фамилия
     * @type {string}
     * @memberof UserItem
     */
    'lastName': string;
    /**
     * Почта
     * @type {string}
     * @memberof UserItem
     */
    'email': string;
    /**
     * роль
     * @type {string}
     * @memberof UserItem
     */
    'role': UserItemRoleEnum;
    /**
     * Заблокирован - 1/ разблокирован - 0
     * @type {number}
     * @memberof UserItem
     */
    'locked': number;
    /**
     * Время создания
     * @type {string}
     * @memberof UserItem
     */
    'createdAt'?: string;
    /**
     * Время обновления
     * @type {string}
     * @memberof UserItem
     */
    'updatedAt'?: string;
}

export const UserItemRoleEnum = {
    Admin: 'admin',
    Operator: 'operator',
    Guest: 'guest'
} as const;

export type UserItemRoleEnum = typeof UserItemRoleEnum[keyof typeof UserItemRoleEnum];

/**
 * 
 * @export
 * @interface UserList
 */
export interface UserList {
    /**
     * Список пользователей
     * @type {Array<UserItem>}
     * @memberof UserList
     */
    'items': Array<UserItem>;
    /**
     * Всего пользователей соответсвуют фильтру
     * @type {number}
     * @memberof UserList
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * имя
     * @type {string}
     * @memberof UserUpdate
     */
    'firstName'?: string;
    /**
     * фамилия
     * @type {string}
     * @memberof UserUpdate
     */
    'lastName'?: string;
    /**
     * Почта
     * @type {string}
     * @memberof UserUpdate
     */
    'email'?: string;
    /**
     * роль
     * @type {string}
     * @memberof UserUpdate
     */
    'role'?: UserUpdateRoleEnum;
    /**
     * Заблокирован - 1/ разблокирован - 0
     * @type {number}
     * @memberof UserUpdate
     */
    'locked'?: number;
    /**
     * Пароль+логин в md5
     * @type {string}
     * @memberof UserUpdate
     */
    'password'?: string;
}

export const UserUpdateRoleEnum = {
    Admin: 'admin',
    Operator: 'operator',
    Guest: 'guest'
} as const;

export type UserUpdateRoleEnum = typeof UserUpdateRoleEnum[keyof typeof UserUpdateRoleEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Залогиниться (access токен устанавливается в сервер куку!!!)
         * @param {LoginParams} loginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginParams: LoginParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginParams' is not null or undefined
            assertParamExists('authControllerLogin', 'loginParams', loginParams)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Разлогиниться
         * @param {string} login логин
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (login: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('authControllerLogout', 'login', login)
            const localVarPath = `/auth/logout/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить новый access токен
         * @param {JWTRefresh} jWTRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: async (jWTRefresh: JWTRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jWTRefresh' is not null or undefined
            assertParamExists('authControllerRefresh', 'jWTRefresh', jWTRefresh)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jWTRefresh, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о пользователе по access токену
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerWhoAmi: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать пользователя
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (userCreate: UserCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('usersControllerCreate', 'userCreate', userCreate)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить пользователя
         * @param {string} login логин
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDelete: async (login: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('usersControllerDelete', 'login', login)
            const localVarPath = `/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список пользователей
         * @param {number} limit Лимит
         * @param {number} offset Смещение
         * @param {string} [sort] Столбец сортировки
         * @param {UsersControllerGetAllOrderEnum} [order] Сортировка. Направление. \&quot;ASC\&quot; - прямое, \&quot;DESC\&quot; - обратное.
         * @param {string} [search] Поисковая строка. Поиск по имени, фамилии, email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAll: async (limit: number, offset: number, sort?: string, order?: UsersControllerGetAllOrderEnum, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('usersControllerGetAll', 'limit', limit)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('usersControllerGetAll', 'offset', offset)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Изменить пользователя
         * @param {string} login логин
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (login: string, userUpdate: UserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('usersControllerUpdate', 'login', login)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('usersControllerUpdate', 'userUpdate', userUpdate)
            const localVarPath = `/users/{login}`
                .replace(`{${"login"}}`, encodeURIComponent(String(login)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Залогиниться (access токен устанавливается в сервер куку!!!)
         * @param {LoginParams} loginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginParams: LoginParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Разлогиниться
         * @param {string} login логин
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(login: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить новый access токен
         * @param {JWTRefresh} jWTRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefresh(jWTRefresh: JWTRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefresh(jWTRefresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить информацию о пользователе по access токену
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerWhoAmi(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerWhoAmi(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Создать пользователя
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(userCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Удалить пользователя
         * @param {string} login логин
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDelete(login: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDelete(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Получить список пользователей
         * @param {number} limit Лимит
         * @param {number} offset Смещение
         * @param {string} [sort] Столбец сортировки
         * @param {UsersControllerGetAllOrderEnum} [order] Сортировка. Направление. \&quot;ASC\&quot; - прямое, \&quot;DESC\&quot; - обратное.
         * @param {string} [search] Поисковая строка. Поиск по имени, фамилии, email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetAll(limit: number, offset: number, sort?: string, order?: UsersControllerGetAllOrderEnum, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetAll(limit, offset, sort, order, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Изменить пользователя
         * @param {string} login логин
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(login: string, userUpdate: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(login, userUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Залогиниться (access токен устанавливается в сервер куку!!!)
         * @param {LoginParams} loginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginParams: LoginParams, options?: any): AxiosPromise<JWTRefresh> {
            return localVarFp.authControllerLogin(loginParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Разлогиниться
         * @param {string} login логин
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(login: string, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить новый access токен
         * @param {JWTRefresh} jWTRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh(jWTRefresh: JWTRefresh, options?: any): AxiosPromise<JWTRefresh> {
            return localVarFp.authControllerRefresh(jWTRefresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о пользователе по access токену
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerWhoAmi(options?: any): AxiosPromise<UserItem> {
            return localVarFp.authControllerWhoAmi(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать пользователя
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(userCreate: UserCreate, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerCreate(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить пользователя
         * @param {string} login логин
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDelete(login: string, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerDelete(login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список пользователей
         * @param {number} limit Лимит
         * @param {number} offset Смещение
         * @param {string} [sort] Столбец сортировки
         * @param {UsersControllerGetAllOrderEnum} [order] Сортировка. Направление. \&quot;ASC\&quot; - прямое, \&quot;DESC\&quot; - обратное.
         * @param {string} [search] Поисковая строка. Поиск по имени, фамилии, email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAll(limit: number, offset: number, sort?: string, order?: UsersControllerGetAllOrderEnum, search?: string, options?: any): AxiosPromise<UserList> {
            return localVarFp.usersControllerGetAll(limit, offset, sort, order, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Изменить пользователя
         * @param {string} login логин
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(login: string, userUpdate: UserUpdate, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerUpdate(login, userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Залогиниться (access токен устанавливается в сервер куку!!!)
     * @param {LoginParams} loginParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogin(loginParams: LoginParams, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerLogin(loginParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Разлогиниться
     * @param {string} login логин
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogout(login: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerLogout(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить новый access токен
     * @param {JWTRefresh} jWTRefresh 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerRefresh(jWTRefresh: JWTRefresh, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerRefresh(jWTRefresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о пользователе по access токену
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerWhoAmi(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerWhoAmi(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать пользователя
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerCreate(userCreate: UserCreate, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerCreate(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить пользователя
     * @param {string} login логин
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerDelete(login: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerDelete(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список пользователей
     * @param {number} limit Лимит
     * @param {number} offset Смещение
     * @param {string} [sort] Столбец сортировки
     * @param {UsersControllerGetAllOrderEnum} [order] Сортировка. Направление. \&quot;ASC\&quot; - прямое, \&quot;DESC\&quot; - обратное.
     * @param {string} [search] Поисковая строка. Поиск по имени, фамилии, email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerGetAll(limit: number, offset: number, sort?: string, order?: UsersControllerGetAllOrderEnum, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerGetAll(limit, offset, sort, order, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Изменить пользователя
     * @param {string} login логин
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerUpdate(login: string, userUpdate: UserUpdate, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerUpdate(login, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UsersControllerGetAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type UsersControllerGetAllOrderEnum = typeof UsersControllerGetAllOrderEnum[keyof typeof UsersControllerGetAllOrderEnum];


